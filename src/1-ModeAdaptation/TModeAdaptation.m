function [BBPACKET] = TModeAdaptation(datafield, dvb, param)
% TModeAdaptation: Processes the input to generate a base band frame, that
% is, a base band header of 80 bits followed by a data field of Kbch-80
% bits.
% @arg input: The payload to be sent
% @arg dvb: The dvb object
% @return BBFRAME: The baseband frame consisting of a header and a data field

% Mode adaptation is explained in subsection 5.1 of the DVBS2 system
% guidelines. It performs the following tasks:
% 1.- Input interface
% 2.- Input Stream Synchronization [optional]
% 3.- Null-packet deletion [For Transport Stream (TS) or Adaptive Coding 
% and Modulation (ACM) only] 
% 4.- CRC-8 coding for error detection [Packetized input streams only]
% 5.- Merging of input streams [Multiple input stream modes only]
% 6.- Slicing into DATA FIELDS

% The Base-Band Header in front of the Data Field helps notifiy the
% receiver of the input stream format and Mode Adaption type.
        
% There are different ways to send the payload. According to the guidelines
% they can be 
% - Single or multiple Transport Streams (TS)
% - Single or multiple Generic Streams (can be either packetized or continuous)

% 1.- Input interface:
% In this simulation we are interested in the Generic Stream interface type, 
% as we want to build a system that is payload independent (we should not
% care about what we are sending). 
% To do so we will work with generic stream of constant-length User Packets
% (UP) of length UPL bits (maxmium value is 64K). If UPL is 0, continious
% generic stream is considered.
    
    if dvb.UPL > 64000 || dvb.UPL == 0
        UPL = de2bi(0, 16)'; % Considered as continious stream if UPL > 64K
    else
        UPL = de2bi(dvb.UPL, 16)'; % 2 Bytes (16 bits) for UPL field
    end

% Mode Adaptation (optional input) shall be a sequence of Data Fields, 
% where each individual Data Field is preceded by a BBHEADER and Stream 
% Adaptation Command to allow setting, by an external "mode adaptation unit",
% of the transmission parameters to be adopted by the DVB-S2 modulator, for
% each specific MA Packet. 
% TODO: I'm going to assume in-band signalling is used (clause I.2).

% The SA command can be mapped into a Transport Header (TH) to be prepended to the data
% generated by the external Mode Adaptation Unit.
% The Transport Header shall consist of 2 bytes:
% The first byte identifies the start of the Mode Adaptation packet and 
% shall correspond to the sequence 0xB8.
    START = de2bi(hex2dec('B8'))';  
% The second byte shall indicate the ACM command, defining the dynamic 
% transmission parameters (MODCOD, TYPE) for the BBFRAME, according to table I.2.
    ACM = zeros([8 1]); 
    ACM(1:5) = de2bi(dvb.MODCOD, 5);
    ACM(6) = 0; % pilots configuration (0 = no pilots, 1 = pilots)
    ACM(7) = 0; % FECFRAME sizes (0 = normal: 64 800 bits; 1 = short: 16 200 bits)
    ACM(8) = 0; % Reserved
    
    TH = [START; ACM]; % TODO: Insert after BBHeader, or maybe this comes from outside this module?
    
    % We also need the Data Field length field for the header.
    DFL = de2bi(length(datafield), 16)'; % Data Field length field [2 bytes]
    
% Merger: From the DVBS2 guidelines:
%       The Merger shall concatenate, in a single output, different data 
%       fields read and sliced from one of its inputs. In presence of a 
%       single stream, only the slicing functionality applies.
% We are only sending packets from one stream. So only slicing "applies".
    
    SYNC = de2bi(0, 8)';
    % Straight from the guidelines: 
%       After Sync-byte replacing by CRC-8, it is necessary to provide the 
%       receiver a method to recover UP synchronization (when the receiver 
%       is already synchronized to the DATA FIELD). Therefore the number of
%       bits from the beginning of the DATA FIELD and the beginning of the 
%       first complete UP (first bit of the CRC-8) (see figure 3) shall be 
%       detected by the Merger/Slicer and stored in SYNCD field (i.e. SYNC Distance) 
%       of the Base-Band Header.
    SYNCD = de2bi(0, 16)'; % SYNC Distance field [2 bytes]

% Modulation Adaptation type MATYPE [2 bytes]: describes the input stream(s)
% format, the type of Mode Adaptation and the transmission Roll-off factor
    MATYPE = zeros(16, 1); % [2 bytes]
% The first byte [8 bits]: See table 3 of the guidelines
    % TS/GS field: Transport or Generic stream
    MATYPE(1:2) = [0; 0]; % Generic packetized stream
    % SIS/MIS field: Single or Multiple Input Stream
    MATYPE(3) = 1; % Single
    % CCM/ACM field (1 bit): Constant Coding and Modulation or Adaptive Coding 
    % and Modulation.
    MATYPE(4) = 1; % CCM
    % ISSYI (1 bit) (Input Stream Synchronization Indicator): If ISSYI = 1 = active,
    % the ISSY field is inserted after UPs (see annex D).
    MATYPE(5) = 0; % Not-active
    % NPD (1 bit): Null-packet deletion active/not active.
    MATYPE(6) = 0; % Not-active
    % RO (2 bits): Transmission Roll-off factor (Î±).
    switch dvb.RolloffFactor
        case 0.35
            MATYPE(7:8) = [0; 0];
        case 0.25
            MATYPE(7:8) = [0; 1];
        case 0.20
            MATYPE(7:8) = [1; 0];
        otherwise
            MATYPE(7:8) = [1; 1];
    end
    
% The second byte [8 bits]
    if (MATYPE(3) == 0) % If SIS/MIS == Multiple Input Stream
        ISI = 0; % Input Stream Identifier (ISI), this is for more than one input
        MATYPE(9:end) = ISI;
    else
        MATYPE(9:end) = 0;
    end    
 
% The header that is to be inserted has length 80 bits (10 bytes). The
% header describes the format fo the DATA FIELD.
% Preparation of the header: The header consists of 6 blocks, 5 were
% already explained before. The 6th is the CRC8 code of aforementioned 5.
    tmp = [MATYPE; UPL; DFL; SYNC; SYNCD];
    CRC8Encoder = comm.CRCGenerator([8 7 6 4 2 0]); 
    BBHEADER = CRC8Encoder(tmp); % CRC-8 field [1 byte]
    
    %for i = 1:size(header,2)
    %    dfl = (de2bi(size(input(:,i),1),16))'; % Data Field Length: Kbch - 80 bits
    %    temp = [matype1;matype2;UPL;dfl;sync;syncd];
        %disp(size(temp))
        
    %    header(:,i) = crc8enc(temp);
    %end
    
    clear tmp MATYPE UPL DFL SYNC SYNCD;
     
    BBPACKET = [BBHEADER; datafield];
     
end

